let isMonitoring = false;
let statusInterval = null;
let statsInterval = null;

let detailedLogsInterval = null;

// Sayfa y√ºklendiƒüinde
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Uygulama ba≈ülatƒ±ldƒ±');
    loadStatus();
    loadHistory();
    startStatusPolling();
    startDetailedLogsPolling(); // Detaylƒ± log polling ba≈ülat
});

// ƒ∞zlemeyi ba≈ülat
async function startMonitoring() {
    const interval = document.getElementById('intervalInput').value;
    
    if (interval < 30) {
        showToast('Kontrol aralƒ±ƒüƒ± en az 30 saniye olmalƒ±dƒ±r!', 'error');
        return;
    }
    
    try {
        addLog('ƒ∞zleme ba≈ülatƒ±lƒ±yor...', 'info');
        
        const response = await fetch('/api/start', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ interval: parseInt(interval) })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            isMonitoring = true;
            updateUIState(true);
            addLog(`‚úÖ ƒ∞zleme ba≈ülatƒ±ldƒ± (${interval}s aralƒ±klarla)`, 'success');
            showToast('ƒ∞zleme ba≈ülatƒ±ldƒ±!', 'success');
            
            // Durum g√ºncellemelerini ba≈ülat
            if (!statusInterval) {
                startStatusPolling();
            }
        } else {
            addLog(`‚ùå Ba≈ülatma hatasƒ±: ${data.error}`, 'error');
            showToast(data.error, 'error');
        }
    } catch (error) {
        addLog(`‚ùå Baƒülantƒ± hatasƒ±: ${error.message}`, 'error');
        showToast('Sunucuya baƒülanƒ±lamadƒ±!', 'error');
    }
}

// ƒ∞zlemeyi durdur
async function stopMonitoring() {
    try {
        addLog('ƒ∞zleme durduruluyor...', 'info');
        
        const response = await fetch('/api/stop', {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (response.ok) {
            isMonitoring = false;
            updateUIState(false);
            addLog('‚èπÔ∏è ƒ∞zleme durduruldu', 'warning');
            showToast('ƒ∞zleme durduruldu', 'warning');
        } else {
            addLog(`‚ùå Durdurma hatasƒ±: ${data.error}`, 'error');
            showToast(data.error, 'error');
        }
    } catch (error) {
        addLog(`‚ùå Baƒülantƒ± hatasƒ±: ${error.message}`, 'error');
        showToast('Sunucuya baƒülanƒ±lamadƒ±!', 'error');
    }
}

// Anƒ±nda kontrol
async function checkNow() {
    try {
        addLog('‚ö° Anƒ±nda kontrol yapƒ±lƒ±yor...', 'info');
        document.getElementById('checkNowBtn').disabled = true;
        
        const response = await fetch('/api/check-now', {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (response.ok) {
            addLog(`‚úÖ Kontrol tamamlandƒ±: ${data.result}`, 'success');
            showToast('Kontrol tamamlandƒ±!', 'success');
            loadHistory();
        } else {
            addLog(`‚ùå Kontrol hatasƒ±: ${data.error}`, 'error');
            showToast(data.error, 'error');
        }
    } catch (error) {
        addLog(`‚ùå Baƒülantƒ± hatasƒ±: ${error.message}`, 'error');
        showToast('Sunucuya baƒülanƒ±lamadƒ±!', 'error');
    } finally {
        setTimeout(() => {
            document.getElementById('checkNowBtn').disabled = false;
        }, 2000);
    }
}

// Durum g√ºncelleme polling
function startStatusPolling() {
    statusInterval = setInterval(loadStatus, 1000); // 1 saniyede bir (HIZLI!)
    statsInterval = setInterval(loadHistory, 5000); // 5 saniyede bir
}

// Detaylƒ± log polling (ger√ßek zamanlƒ± backend loglarƒ±)
function startDetailedLogsPolling() {
    detailedLogsInterval = setInterval(loadDetailedLogs, 500); // 0.5 saniyede bir (√áOK HIZLI!)
    loadDetailedLogs(); // ƒ∞lk y√ºklemeyi hemen yap
}

// Backend'den detaylƒ± loglarƒ± y√ºkle
async function loadDetailedLogs() {
    try {
        const response = await fetch('/api/logs/recent');
        const data = await response.json();
        
        if (data.logs && data.logs.length > 0) {
            const logContainer = document.getElementById('logContainer');
            
            // Mevcut loglarƒ± sakla
            const currentLogs = Array.from(logContainer.children);
            const currentCount = currentLogs.length;
            
            // Yeni loglarƒ± ekle (en yeni √∂nce)
            data.logs.reverse().forEach(log => {
                const logEntry = document.createElement('div');
                const typeClass = log.level === 'ERROR' ? 'error' : 
                                 log.level === 'WARNING' ? 'warning' : 
                                 log.level === 'SUCCESS' ? 'success' : 'info';
                
                logEntry.className = `log-entry ${typeClass}`;
                logEntry.innerHTML = `
                    <span class="log-time">${log.timestamp}</span>
                    <span class="log-message">${log.message}</span>
                `;
                
                // Yeni logu en √ºste ekle
                if (currentCount === 0 || logEntry.textContent !== currentLogs[0].textContent) {
                    logContainer.insertBefore(logEntry, logContainer.firstChild);
                }
            });
            
            // En fazla 100 log tut
            while (logContainer.children.length > 100) {
                logContainer.removeChild(logContainer.lastChild);
            }
        }
        
    } catch (error) {
        console.error('Detaylƒ± log y√ºkleme hatasƒ±:', error);
    }
}

// Mevcut durumu y√ºkle
async function loadStatus() {
    try {
        const response = await fetch('/api/status');
        const data = await response.json();
        
        // Durum g√∂stergesini g√ºncelle
        const statusDot = document.getElementById('statusDot');
        const statusText = document.getElementById('statusText');
        
        if (data.monitoring_active) {
            statusDot.className = 'status-dot active';
            statusText.textContent = 'ƒ∞zleme aktif';
            isMonitoring = true;
        } else {
            statusDot.className = 'status-dot';
            statusText.textContent = 'Sistem hazƒ±r';
            isMonitoring = false;
        }
        
        // Son kontrol bilgilerini g√ºncelle
        if (data.last_check_time) {
            const lastCheckDate = new Date(data.last_check_time * 1000);
            document.getElementById('lastCheck').textContent = lastCheckDate.toLocaleString('tr-TR');
        }
        
        document.getElementById('lastResult').textContent = data.last_check_status;
        document.getElementById('checkInterval').textContent = data.check_interval;
        
        // CAPTCHA g√∂rselini g√∂ster (otomatik g√ºncelleme)
        const captchaCard = document.getElementById('captchaCard');
        const captchaImage = document.getElementById('captchaImage');
        const captchaText = document.getElementById('captchaText');
        
        if (data.captcha_image) {
            // CAPTCHA varsa kartƒ± g√∂ster
            if (captchaCard.style.display === 'none') {
                captchaCard.style.display = 'block';
                captchaCard.style.animation = 'fadeIn 0.3s ease-in';
            }
            
            // G√∂rsel deƒüi≈ütiyse g√ºncelle (smooth transition)
            if (captchaImage.src !== data.captcha_image) {
                captchaImage.style.opacity = '0.3';
                setTimeout(() => {
                    captchaImage.src = data.captcha_image;
                    captchaImage.style.opacity = '1';
                }, 150);
            }
            
            // Metin deƒüi≈ütiyse g√ºncelle (smooth transition)
            if (captchaText.textContent !== (data.captcha_text || '-')) {
                captchaText.style.transform = 'scale(1.2)';
                captchaText.style.color = '#28a745';
                captchaText.textContent = data.captcha_text || '-';
                setTimeout(() => {
                    captchaText.style.transform = 'scale(1)';
                    captchaText.style.color = '#007bff';
                }, 300);
            }
        } else {
            captchaCard.style.display = 'none';
        }
        
        updateUIState(data.monitoring_active);
        
    } catch (error) {
        console.error('Durum y√ºkleme hatasƒ±:', error);
    }
}

// Kontrol ge√ßmi≈üini y√ºkle
async function loadHistory() {
    try {
        const response = await fetch('/api/history');
        const data = await response.json();
        
        const historyContainer = document.getElementById('historyContainer');
        
        if (data.length === 0) {
            historyContainer.innerHTML = '<p class="text-muted">Hen√ºz kontrol yapƒ±lmadƒ±...</p>';
            return;
        }
        
        // ƒ∞statistikleri hesapla
        const totalChecks = data.length;
        const successfulChecks = data.filter(c => c.status === 'success').length;
        const failedChecks = data.filter(c => c.error).length;
        const appointmentsFound = data.filter(c => c.appointment_found).length;
        
        document.getElementById('totalChecks').textContent = totalChecks;
        document.getElementById('successfulChecks').textContent = successfulChecks;
        document.getElementById('failedChecks').textContent = failedChecks;
        document.getElementById('appointmentsFound').textContent = appointmentsFound;
        
        // Ge√ßmi≈üi g√∂ster
        historyContainer.innerHTML = data.slice(0, 10).map(check => {
            const date = new Date(check.timestamp);
            const statusClass = check.error ? 'error' : 'success';
            const badgeClass = check.error ? 'badge-error' : 'badge-success';
            const statusText = check.appointment_found ? 'üéâ Randevu bulundu!' : 
                             check.error ? `‚ùå ${check.error}` : '‚úÖ Ba≈üarƒ±lƒ±';
            
            return `
                <div class="history-item ${statusClass}">
                    <div class="history-info">
                        <div class="history-time">${date.toLocaleString('tr-TR')}</div>
                        <div class="history-status">${statusText}</div>
                    </div>
                    <div class="history-badge ${badgeClass}">
                        ${check.appointment_found ? 'Randevu' : check.error ? 'Hata' : 'Kontrol'}
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Ge√ßmi≈ü y√ºkleme hatasƒ±:', error);
    }
}

// Ge√ßmi≈üi yenile
function refreshHistory() {
    addLog('üîÑ Ge√ßmi≈ü yenileniyor...', 'info');
    loadHistory();
    showToast('Ge√ßmi≈ü yenilendi', 'success');
}

// UI durumunu g√ºncelle
function updateUIState(monitoring) {
    document.getElementById('startBtn').disabled = monitoring;
    document.getElementById('stopBtn').disabled = !monitoring;
    document.getElementById('intervalInput').disabled = monitoring;
}

// Log ekle
function addLog(message, type = 'info') {
    const logContainer = document.getElementById('logContainer');
    const time = new Date().toLocaleTimeString('tr-TR');
    
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${type}`;
    logEntry.innerHTML = `
        <span class="log-time">${time}</span>
        <span class="log-message">${message}</span>
    `;
    
    logContainer.insertBefore(logEntry, logContainer.firstChild);
    
    // En fazla 50 log tut
    while (logContainer.children.length > 50) {
        logContainer.removeChild(logContainer.lastChild);
    }
}

// Loglarƒ± temizle
function clearLogs() {
    const logContainer = document.getElementById('logContainer');
    logContainer.innerHTML = `
        <div class="log-entry info">
            <span class="log-time">${new Date().toLocaleTimeString('tr-TR')}</span>
            <span class="log-message">Loglar temizlendi</span>
        </div>
    `;
    showToast('Loglar temizlendi', 'success');
}

// Toast bildirimi g√∂ster
function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    toastMessage.textContent = message;
    toast.style.borderLeftColor = 
        type === 'success' ? 'var(--primary-color)' :
        type === 'error' ? 'var(--danger-color)' :
        type === 'warning' ? 'var(--warning-color)' :
        'var(--info-color)';
    
    toast.classList.add('show');
    
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// Sayfa kapatƒ±lƒ±rken polling'i durdur
window.addEventListener('beforeunload', () => {
    if (statusInterval) clearInterval(statusInterval);
    if (statsInterval) clearInterval(statsInterval);
    if (detailedLogsInterval) clearInterval(detailedLogsInterval);
});